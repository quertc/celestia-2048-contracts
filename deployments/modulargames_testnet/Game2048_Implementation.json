{
  "address": "0x840508B5Fc7e8d305ed78862cAB02990d3D807A4",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boardId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        }
      ],
      "name": "CreateBoard",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boardId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "HighScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "boardId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum Game2048.MoveDirection",
          "name": "dir",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extraScore",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalScore",
          "type": "uint256"
        }
      ],
      "name": "Move",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetCreateBoardPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "boardOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "createBoard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "boardId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "createBoardPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBoard",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "controller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "score",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "moves",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "tiles",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Game2048.Board",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "highScores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "contract IToken2048",
          "name": "_token2048",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataController",
      "outputs": [
        {
          "internalType": "contract IMetadata2048",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boardId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moveIndex",
          "type": "uint256"
        },
        {
          "internalType": "enum Game2048.MoveDirection",
          "name": "dir",
          "type": "uint8"
        }
      ],
      "name": "move",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setCreateBoardPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMetadata2048",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setMetadataController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token2048",
      "outputs": [
        {
          "internalType": "contract IToken2048",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x457a5473d5abd910867c1a4b3de67498b247653ed3317dca4b4c8ab9de805eb7",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2048BcD1487bFaa15A4C2DaCFAD9C30ec774731c",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "3035310",
    "logsBloom": "0x
    "blockHash": "0x869af5f5b501fea65b2ebe5fece39cdf2739282494f71436d861e69d995df836",
    "transactionHash": "0x457a5473d5abd910867c1a4b3de67498b247653ed3317dca4b4c8ab9de805eb7",
    "logs": [],
    "blockNumber": 360568,
    "cumulativeGasUsed": "3082151",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "660542510875e919183521bb6dea693f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"CreateBoard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"HighScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"boardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum Game2048.MoveDirection\",\"name\":\"dir\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalScore\",\"type\":\"uint256\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetCreateBoardPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"boardOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"createBoard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createBoardPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBoard\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moves\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tiles\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Game2048.Board\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"highScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract IToken2048\",\"name\":\"_token2048\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataController\",\"outputs\":[{\"internalType\":\"contract IMetadata2048\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moveIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum Game2048.MoveDirection\",\"name\":\"dir\",\"type\":\"uint8\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setCreateBoardPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadata2048\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setMetadataController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2048\",\"outputs\":[{\"internalType\":\"contract IToken2048\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Game2048.sol\":\"Game2048\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Game2048.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./IToken2048.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\ncontract Game2048 is ERC721(\\\"2048 Board\\\", \\\"2048B\\\"), Initializable {\\n    IToken2048 public token2048;\\n    IMetadata2048 public metadataController;\\n    address public admin;\\n    mapping(address => uint256) public createBoardPrice;\\n\\n    enum MoveDirection {\\n        UP,\\n        DOWN,\\n        LEFT,\\n        RIGHT\\n    }\\n\\n    struct Board {\\n        address owner;\\n        address controller;\\n        uint256 id;\\n        uint256 score;\\n        uint256 moves;\\n        // bool active;\\n        uint256[] tiles;\\n    }\\n    Board[] private boards;\\n    mapping(address => uint256) public highScores;\\n\\n    uint256[100] private __gap;\\n\\n    modifier onlyBoardController(uint256 boardId) {\\n        require(msg.sender == boards[boardId].owner || msg.sender == boards[boardId].controller, \\\"Not board owner\\\");\\n        // require(boards[boardId].active, \\\"Board finished\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == admin, \\\"Forbidden\\\");\\n        _;\\n    }\\n\\n    function initialize(address _admin, IToken2048 _token2048) public initializer {\\n        admin = _admin;\\n        token2048 = _token2048;\\n    }\\n\\n    function getBoard(uint256 id) public view returns (Board memory) {\\n        return boards[id];\\n    }\\n\\n    // Note: pseudo random but good enough on OP Stack as block.difficulty is a random value\\n    function random(uint256 nonce) public view returns (uint256) {\\n        return\\n            uint(\\n                keccak256(\\n                    abi.encodePacked(block.difficulty, block.timestamp, nonce)\\n                )\\n            );\\n    }\\n\\n    function _resetBoard(uint256[] memory tiles) internal pure {\\n        tiles[0] = 0;\\n        tiles[1] = 0;\\n        tiles[2] = 0;\\n        tiles[3] = 0;\\n        tiles[4] = 0;\\n        tiles[5] = 0;\\n        tiles[6] = 0;\\n        tiles[7] = 0;\\n        tiles[8] = 0;\\n        tiles[9] = 0;\\n        tiles[10] = 0;\\n        tiles[11] = 0;\\n        tiles[12] = 0;\\n        tiles[13] = 0;\\n        tiles[14] = 0;\\n        tiles[15] = 0;\\n    }\\n\\n    function _new2(\\n        Board memory board\\n    ) internal view returns (uint256 newIndex, uint256 totalMissing) {\\n        unchecked {\\n            uint256[16] memory missing;\\n\\n            for (uint256 i; i < 16; ++i) {\\n                if (board.tiles[i] == 0) {\\n                    missing[totalMissing++] = i;\\n                }\\n            }\\n\\n            require(totalMissing > 0, \\\"Board full\\\");\\n\\n            newIndex = missing[\\n                random(board.score * block.timestamp) % totalMissing\\n            ];\\n\\n            board.tiles[newIndex] = 2;\\n        }\\n    }\\n\\n    // Anybody can create their own board\\n    event CreateBoard(\\n        address indexed owner,\\n        uint256 indexed nonce,\\n        uint256 indexed boardId,\\n        uint256 startIndex\\n    );\\n\\n    function createBoard(\\n        address boardOwner,\\n        address controller,\\n        address paymentToken,\\n        uint256 nonce\\n    ) public payable returns (uint256 boardId, uint256 startIndex) {\\n        require(createBoardPrice[paymentToken] > 0, \\\"Payment token not supported\\\");\\n        require(paymentToken != address(0) || msg.value >= createBoardPrice[address(0)], \\\"Underpay\\\");\\n\\n        uint256[] memory tiles = new uint256[](16);\\n\\n        _resetBoard(tiles);\\n\\n        startIndex = random(nonce) % 16;\\n\\n        tiles[startIndex] = 2;\\n\\n        boardId = boards.length;\\n\\n        boards.push(\\n            Board({\\n                owner: boardOwner,\\n                controller: controller,\\n                id: boardId,\\n                score: 0,\\n                moves: 0,\\n                // active: true,\\n                tiles: tiles\\n            })\\n        );\\n\\n        _mint(boardOwner, boardId);\\n\\n        if (paymentToken != address(0)) {\\n            IERC20(paymentToken).transferFrom(msg.sender, address(this), createBoardPrice[paymentToken]);\\n        }\\n\\n        uint256 controllerGas = msg.value;\\n\\n        if (paymentToken == address(0)) {\\n            controllerGas -= createBoardPrice[address(0)];\\n        }\\n\\n        if (controllerGas > 0) {\\n            (bool sendGasSuccess, ) = controller.call{value: controllerGas}(\\\"\\\");\\n            require(sendGasSuccess, \\\"Failed to send gas to controller\\\");\\n        }\\n\\n        emit CreateBoard(boardOwner, nonce, boardId, startIndex);\\n    }\\n\\n    function _moveUp(Board memory board) internal pure returns (uint256 score) {\\n        unchecked {\\n            uint256[] memory tiles = board.tiles;\\n            uint256[4][4] memory pipes;\\n            uint8[4] memory pipeIndex = [0, 0, 0, 0];\\n\\n            bytes32 tilesHash = keccak256(abi.encodePacked(tiles));\\n\\n            for (uint256 col; col < 4; ++col) {\\n                for (uint256 row = 0; row < 4; ++row) {\\n                    uint256 index = (3 - row) * 4 + col;\\n                    if (tiles[index] > 0) {\\n                        pipes[col][pipeIndex[col]++] = tiles[index];\\n                    }\\n                }\\n            }\\n\\n            _resetBoard(tiles);\\n\\n            uint256 stackPop = 0;\\n            uint8[4] memory tileIndex = [0, 0, 0, 0];\\n\\n            for (uint256 col; col < 4; ++col) {\\n                uint256 pipeLength = pipeIndex[col];\\n                for (uint256 i; i < pipeLength; ++i) {\\n                    uint256 pipeVal = pipes[col][pipeLength - i - 1];\\n                    if (stackPop != pipeVal) {\\n                        stackPop = pipeVal;\\n                        tiles[(tileIndex[col]++) * 4 + col] = stackPop;\\n                    } else {\\n                        tiles[(tileIndex[col] - 1) * 4 + col] = stackPop * 2;\\n                        score += stackPop * 2;\\n                        stackPop = 0;\\n                    }\\n                }\\n\\n                stackPop = 0;\\n            }\\n\\n            require(\\n                keccak256(abi.encodePacked(tiles)) != tilesHash,\\n                \\\"Cannot move in this direction\\\"\\n            );\\n        }\\n    }\\n\\n    function _moveDown(\\n        Board memory board\\n    ) internal pure returns (uint256 score) {\\n        unchecked {\\n            uint256[] memory tiles = board.tiles;\\n            uint256[4][4] memory pipes;\\n            uint8[4] memory pipeIndex = [0, 0, 0, 0];\\n\\n            bytes32 tilesHash = keccak256(abi.encodePacked(tiles));\\n\\n            for (uint256 col; col < 4; ++col) {\\n                for (uint256 row = 0; row < 4; ++row) {\\n                    uint256 index = row * 4 + col;\\n                    if (tiles[index] > 0) {\\n                        pipes[col][pipeIndex[col]++] = tiles[index];\\n                    }\\n                }\\n            }\\n\\n            _resetBoard(tiles);\\n\\n            uint256 stackPop = 0;\\n            uint8[4] memory tileIndex = [3, 3, 3, 3];\\n\\n            for (uint256 col; col < 4; ++col) {\\n                uint256 pipeLength = pipeIndex[col];\\n                for (uint256 i; i < pipeLength; ++i) {\\n                    uint256 pipeVal = pipes[col][pipeLength - i - 1];\\n                    if (stackPop != pipeVal) {\\n                        stackPop = pipeVal;\\n                        tiles[(tileIndex[col]--) * 4 + col] = stackPop;\\n                    } else {\\n                        tiles[(tileIndex[col] + 1) * 4 + col] = stackPop * 2;\\n                        score += stackPop * 2;\\n                        stackPop = 0;\\n                    }\\n                }\\n\\n                stackPop = 0;\\n            }\\n\\n            require(\\n                keccak256(abi.encodePacked(tiles)) != tilesHash,\\n                \\\"Cannot move in this direction\\\"\\n            );\\n        }\\n    }\\n\\n    function _moveLeft(\\n        Board memory board\\n    ) internal pure returns (uint256 score) {\\n        unchecked {\\n            uint256[] memory tiles = board.tiles;\\n            uint256[4][4] memory pipes;\\n            uint8[4] memory pipeIndex = [0, 0, 0, 0];\\n\\n            bytes32 tilesHash = keccak256(abi.encodePacked(tiles));\\n\\n            for (uint256 row; row < 4; ++row) {\\n                for (uint256 col = 0; col < 4; ++col) {\\n                    uint256 index = row * 4 + 3 - col;\\n                    if (tiles[index] > 0) {\\n                        pipes[row][pipeIndex[row]++] = tiles[index];\\n                    }\\n                }\\n            }\\n\\n            _resetBoard(tiles);\\n\\n            uint256 stackPop = 0;\\n            uint8[4] memory tileIndex = [0, 0, 0, 0];\\n\\n            for (uint256 row; row < 4; ++row) {\\n                uint256 pipeLength = pipeIndex[row];\\n                for (uint256 i; i < pipeLength; ++i) {\\n                    uint256 pipeVal = pipes[row][pipeLength - i - 1];\\n                    if (stackPop != pipeVal) {\\n                        stackPop = pipeVal;\\n                        tiles[row * 4 + (tileIndex[row]++)] = stackPop;\\n                    } else {\\n                        tiles[row * 4 + (tileIndex[row] - 1)] = stackPop * 2;\\n                        score += stackPop * 2;\\n                        stackPop = 0;\\n                    }\\n                }\\n\\n                stackPop = 0;\\n            }\\n\\n            require(\\n                keccak256(abi.encodePacked(tiles)) != tilesHash,\\n                \\\"Cannot move in this direction\\\"\\n            );\\n        }\\n    }\\n\\n    function _moveRight(\\n        Board memory board\\n    ) internal pure returns (uint256 score) {\\n        unchecked {\\n            uint256[] memory tiles = board.tiles;\\n            uint256[4][4] memory pipes;\\n            uint8[4] memory pipeIndex = [0, 0, 0, 0];\\n\\n            bytes32 tilesHash = keccak256(abi.encodePacked(tiles));\\n\\n            for (uint256 row; row < 4; ++row) {\\n                for (uint256 col = 0; col < 4; ++col) {\\n                    uint256 index = row * 4 + col;\\n                    if (tiles[index] > 0) {\\n                        pipes[row][pipeIndex[row]++] = tiles[index];\\n                    }\\n                }\\n            }\\n\\n            _resetBoard(tiles);\\n\\n            uint256 stackPop = 0;\\n            uint8[4] memory tileIndex = [0, 0, 0, 0];\\n\\n            for (uint256 row; row < 4; ++row) {\\n                uint256 pipeLength = pipeIndex[row];\\n                for (uint256 i; i < pipeLength; ++i) {\\n                    uint256 pipeVal = pipes[row][pipeLength - i - 1];\\n                    if (stackPop != pipeVal) {\\n                        stackPop = pipeVal;\\n                        tiles[row * 4 + 3 - (tileIndex[row]++)] = stackPop;\\n                    } else {\\n                        tiles[row * 4 + 3 - (tileIndex[row] - 1)] =\\n                            stackPop *\\n                            2;\\n                        score += stackPop * 2;\\n                        stackPop = 0;\\n                    }\\n                }\\n\\n                stackPop = 0;\\n            }\\n\\n            require(\\n                keccak256(abi.encodePacked(tiles)) != tilesHash,\\n                \\\"Cannot move in this direction\\\"\\n            );\\n        }\\n    }\\n\\n    event HighScore(\\n        address indexed owner,\\n        uint256 indexed boardId,\\n        uint256 score\\n    );\\n\\n    event Move(\\n        address indexed owner,\\n        uint256 indexed boardId,\\n        MoveDirection indexed dir,\\n        uint256 newIndex,\\n        uint256 extraScore,\\n        uint256 totalScore\\n    );\\n\\n    function move(\\n        uint256 boardId,\\n        uint256 moveIndex,\\n        MoveDirection dir\\n    ) public onlyBoardController(boardId) {\\n        Board memory board = boards[boardId];\\n        uint256 extraScore;\\n\\n        require(moveIndex == board.moves++, \\\"Move already executed\\\");\\n\\n        if (dir == MoveDirection.UP) {\\n            extraScore = _moveUp(board);\\n        } else if (dir == MoveDirection.DOWN) {\\n            extraScore = _moveDown(board);\\n        } else if (dir == MoveDirection.LEFT) {\\n            extraScore = _moveLeft(board);\\n        } else if (dir == MoveDirection.RIGHT) {\\n            extraScore = _moveRight(board);\\n        }\\n\\n        board.score += extraScore;\\n\\n        if (board.score > highScores[board.owner]) {\\n            highScores[board.owner] = board.score;\\n            emit HighScore(board.owner, boardId, board.score);\\n        }\\n\\n        if (address(token2048) != address(0)) {\\n            token2048.mint(board.owner, extraScore * 1e18);\\n        }\\n\\n        (uint256 newIndex, ) = _new2(board);\\n\\n        boards[boardId] = board;\\n\\n        emit Move(board.owner, boardId, dir, newIndex, extraScore, board.score);\\n    }\\n\\n    // event EndGame(\\n    //     address indexed owner,\\n    //     uint256 indexed boardId,\\n    //     uint256 totalScore\\n    // );\\n\\n    // function endGame(uint256 boardId) public onlyBoardController(boardId) {\\n    //     uint256 score = boards[boardId].score;\\n\\n    //     boards[boardId].active = false;\\n\\n    //     if (address(token2048) != address(0)) {\\n    //         token2048.mint(boards[boardId].owner, score);\\n    //     }\\n\\n    //     emit EndGame(boards[boardId].owner, boardId, score);\\n    // }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        if (address(metadataController) == address(0)) {\\n            return \\\"\\\";\\n        }\\n\\n        return metadataController.tokenURI(tokenId);\\n    }\\n\\n    function setMetadataController(IMetadata2048 controller) public onlyOwner {\\n        metadataController = controller;\\n    }\\n\\n    event SetCreateBoardPrice(address indexed setter, address indexed token, uint256 price);\\n    function setCreateBoardPrice(address token, uint256 price) public onlyOwner {\\n        createBoardPrice[token] = price;\\n        emit SetCreateBoardPrice(msg.sender, token, price);\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function transferOwnership(address newAdmin) public onlyOwner {\\n        emit OwnershipTransferred(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n\\n    // Withdraw module\\n    function withdrawETH() public onlyOwner {\\n        address a = admin;\\n        (bool success, ) = a.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Withdraw failed\\\");\\n    }\\n\\n    function withdrawERC20(IERC20 token) public onlyOwner {\\n        token.transfer(admin, token.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x211730c7e804e4cd8df2665eb644d24d50cf9fb23f38c494b5e9898633a9489c\",\"license\":\"MIT\"},\"contracts/IMetadata2048.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IMetadata2048 {\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\",\"keccak256\":\"0xb7730b88080168acfc015973c253f571ddf39cd1bfc962bfc7a2e30044a7433f\",\"license\":\"MIT\"},\"contracts/IToken2048.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IMetadata2048.sol\\\";\\n\\ninterface IToken2048 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0xce666e078b16224e7978cfbb31ce31009d3eb63d3d897b34a13af1b94d340739\",\"license\":\"MIT\"},\"contracts/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```solidity\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n *\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Storage of the initializable contract.\\r\\n     *\\r\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\r\\n     * when using with upgradeable contracts.\\r\\n     *\\r\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\r\\n     */\\r\\n    struct InitializableStorage {\\r\\n        /**\\r\\n         * @dev Indicates that the contract has been initialized.\\r\\n         */\\r\\n        uint64 _initialized;\\r\\n        /**\\r\\n         * @dev Indicates that the contract is in the process of being initialized.\\r\\n         */\\r\\n        bool _initializing;\\r\\n    }\\r\\n\\r\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\r\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\r\\n\\r\\n    /**\\r\\n     * @dev The contract is already initialized.\\r\\n     */\\r\\n    error InvalidInitialization();\\r\\n\\r\\n    /**\\r\\n     * @dev The contract is not initializing.\\r\\n     */\\r\\n    error NotInitializing();\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint64 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\r\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\r\\n     * production.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        // solhint-disable-next-line var-name-mixedcase\\r\\n        InitializableStorage storage $ = _getInitializableStorage();\\r\\n\\r\\n        // Cache values to avoid duplicated sloads\\r\\n        bool isTopLevelCall = !$._initializing;\\r\\n        uint64 initialized = $._initialized;\\r\\n\\r\\n        // Allowed calls:\\r\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\r\\n        //                 initialized\\r\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\r\\n        //                 current contract is just being deployed\\r\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\r\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\r\\n\\r\\n        if (!initialSetup && !construction) {\\r\\n            revert InvalidInitialization();\\r\\n        }\\r\\n        $._initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            $._initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            $._initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint64 version) {\\r\\n        // solhint-disable-next-line var-name-mixedcase\\r\\n        InitializableStorage storage $ = _getInitializableStorage();\\r\\n\\r\\n        if ($._initializing || $._initialized >= version) {\\r\\n            revert InvalidInitialization();\\r\\n        }\\r\\n        $._initialized = version;\\r\\n        $._initializing = true;\\r\\n        _;\\r\\n        $._initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        _checkInitializing();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\r\\n     */\\r\\n    function _checkInitializing() internal view virtual {\\r\\n        if (!_isInitializing()) {\\r\\n            revert NotInitializing();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        // solhint-disable-next-line var-name-mixedcase\\r\\n        InitializableStorage storage $ = _getInitializableStorage();\\r\\n\\r\\n        if ($._initializing) {\\r\\n            revert InvalidInitialization();\\r\\n        }\\r\\n        if ($._initialized != type(uint64).max) {\\r\\n            $._initialized = type(uint64).max;\\r\\n            emit Initialized(type(uint64).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint64) {\\r\\n        return _getInitializableStorage()._initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _getInitializableStorage()._initializing;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a pointer to the storage namespace.\\r\\n     */\\r\\n    // solhint-disable-next-line var-name-mixedcase\\r\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\r\\n        assembly {\\r\\n            $.slot := INITIALIZABLE_STORAGE\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc04bbd3dabce7ddf5ba1e6bdaa9373657266378f237ee9fa7afac774ab5ef8fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600a8152602001690c8c0d0e08109bd85c9960b21b8152506040518060400160405280600581526020016419181a1c2160d91b815250816000908162000064919062000121565b50600162000073828262000121565b505050620001ed565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a757607f821691505b602082108103620000c857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011c57600081815260208120601f850160051c81016020861015620000f75750805b601f850160051c820191505b81811015620001185782815560010162000103565b5050505b505050565b81516001600160401b038111156200013d576200013d6200007c565b62000155816200014e845462000092565b84620000ce565b602080601f8311600181146200018d5760008415620001745750858301515b600019600386901b1c1916600185901b17855562000118565b600085815260208120601f198616915b82811015620001be578886015182559484019460019091019084016200019d565b5085821015620001dd5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6134e380620001fd6000396000f3fe6080604052600436106101b65760003560e01c806395d89b41116100ec578063c87b56dd1161008a578063e985e9c511610064578063e985e9c514610513578063f2fde38b14610533578063f4f3b20014610553578063f851a4401461057357600080fd5b8063c87b56dd146104be578063de7250aa146104de578063e086e5ec146104fe57600080fd5b8063a3c3ad1d116100c6578063a3c3ad1d14610436578063a6fc859314610456578063b863bd371461047e578063b88d4fde1461049e57600080fd5b806395d89b41146103e1578063a22cb465146103f6578063a3a001371461041657600080fd5b806342842e0e11610159578063485cc95511610133578063485cc955146103615780636352211e146103815780636482513a146103a157806370a08231146103c157600080fd5b806342842e0e146102f457806344d76d931461031457806345e09e541461033457600080fd5b8063081812fc11610195578063081812fc1461024d578063095ea7b31461028557806323b872dd146102a757806324c28f8e146102c757600080fd5b8062d8e104146101bb57806301ffc9a7146101fb57806306fdde031461022b575b600080fd5b3480156101c757600080fd5b506101e86101d6366004612d6d565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561020757600080fd5b5061021b610216366004612da7565b610593565b60405190151581526020016101f2565b34801561023757600080fd5b506102406105e5565b6040516101f29190612e14565b34801561025957600080fd5b5061026d610268366004612e27565b610677565b6040516001600160a01b0390911681526020016101f2565b34801561029157600080fd5b506102a56102a0366004612e40565b61069e565b005b3480156102b357600080fd5b506102a56102c2366004612e6c565b6107b8565b3480156102d357600080fd5b506101e86102e2366004612d6d565b60096020526000908152604090205481565b34801561030057600080fd5b506102a561030f366004612e6c565b6107e9565b34801561032057600080fd5b506102a561032f366004612d6d565b610804565b34801561034057600080fd5b5061035461034f366004612e27565b610850565b6040516101f29190612ead565b34801561036d57600080fd5b506102a561037c366004612f3e565b61095f565b34801561038d57600080fd5b5061026d61039c366004612e27565b610a97565b3480156103ad57600080fd5b5060065461026d906001600160a01b031681565b3480156103cd57600080fd5b506101e86103dc366004612d6d565b610af7565b3480156103ed57600080fd5b50610240610b7d565b34801561040257600080fd5b506102a5610411366004612f85565b610b8c565b34801561042257600080fd5b506102a5610431366004612fb3565b610b9b565b34801561044257600080fd5b506102a5610451366004612e40565b61103d565b610469610464366004612ff0565b6110c2565b604080519283526020830191909152016101f2565b34801561048a57600080fd5b506101e8610499366004612e27565b61155b565b3480156104aa57600080fd5b506102a56104b93660046130b0565b611591565b3480156104ca57600080fd5b506102406104d9366004612e27565b6115c9565b3480156104ea57600080fd5b5060075461026d906001600160a01b031681565b34801561050a57600080fd5b506102a5611661565b34801561051f57600080fd5b5061021b61052e366004612f3e565b611724565b34801561053f57600080fd5b506102a561054e366004612d6d565b611752565b34801561055f57600080fd5b506102a561056e366004612d6d565b6117d8565b34801561057f57600080fd5b5060085461026d906001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b14806105c457506001600160e01b03198216635b5e139f60e01b145b806105df57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546105f49061315f565b80601f01602080910402602001604051908101604052809291908181526020018280546106209061315f565b801561066d5780601f106106425761010080835404028352916020019161066d565b820191906000526020600020905b81548152906001019060200180831161065057829003601f168201915b5050505050905090565b6000610682826118e8565b506000908152600460205260409020546001600160a01b031690565b60006106a982610a97565b9050806001600160a01b0316836001600160a01b03160361071b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061073757506107378133611724565b6107a95760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610712565b6107b3838361194a565b505050565b6107c233826119b8565b6107de5760405162461bcd60e51b815260040161071290613199565b6107b3838383611a17565b6107b383838360405180602001604052806000815250611591565b6008546001600160a01b0316331461082e5760405162461bcd60e51b8152600401610712906131e6565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b61089b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b600a82815481106108ae576108ae613209565b60009182526020918290206040805160c081018252600690930290910180546001600160a01b0390811684526001820154168385015260028101548383015260038101546060840152600481015460808401526005810180548351818702810187019094528084529394919360a08601939283018282801561094f57602002820191906000526020600020905b81548152602001906001019080831161093b575b5050505050815250509050919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156109a55750825b905060008267ffffffffffffffff1660011480156109c25750303b155b9050811580156109d0575080155b156109ee5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610a1857845460ff60401b1916600160401b1785555b600880546001600160a01b03808a166001600160a01b03199283161790925560068054928916929091169190911790558315610a8e57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6000818152600260205260408120546001600160a01b0316806105df5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610712565b60006001600160a01b038216610b615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610712565b506001600160a01b031660009081526003602052604090205490565b6060600180546105f49061315f565b610b97338383611b7b565b5050565b82600a8181548110610baf57610baf613209565b60009182526020909120600690910201546001600160a01b0316331480610c045750600a8181548110610be457610be4613209565b60009182526020909120600690910201600101546001600160a01b031633145b610c425760405162461bcd60e51b815260206004820152600f60248201526e2737ba103137b0b9321037bbb732b960891b6044820152606401610712565b6000600a8581548110610c5757610c57613209565b60009182526020918290206040805160c081018252600690930290910180546001600160a01b0390811684526001820154168385015260028101548383015260038101546060840152600481015460808401526005810180548351818702810187019094528084529394919360a086019392830182828015610cf857602002820191906000526020600020905b815481526020019060010190808311610ce4575b50505050508152505090506000816080018051809190610d1790613235565b90528514610d5f5760405162461bcd60e51b8152602060048201526015602482015274135bdd9948185b1c9958591e48195e1958dd5d1959605a1b6044820152606401610712565b6000846003811115610d7357610d7361324e565b03610d8857610d8182611c49565b9050610df1565b6001846003811115610d9c57610d9c61324e565b03610daa57610d8182611f46565b6002846003811115610dbe57610dbe61324e565b03610dcc57610d81826121c4565b6003846003811115610de057610de061324e565b03610df157610dee82612440565b90505b8082606001818151610e039190613264565b90525081516001600160a01b03166000908152600b602052604090205460608301511115610e955760608201805183516001600160a01b039081166000908152600b602052604090819020929092558451925191518993909116917ff22f584e271bf2151c92bba9d84c422a1b1067e5895ab5bd0a784a3433222cab91610e8c91815260200190565b60405180910390a35b6006546001600160a01b031615610f2e5760065482516001600160a01b03909116906340c10f1990610ecf84670de0b6b3a7640000613277565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610f1557600080fd5b505af1158015610f29573d6000803e3d6000fd5b505050505b6000610f39836126bb565b50905082600a8881548110610f5057610f50613209565b6000918252602091829020835160069092020180546001600160a01b039283166001600160a01b0319918216178255848401516001830180549190941691161790915560408301516002820155606083015160038201556080830151600482015560a083015180519192610fcc92600585019290910190612c8e565b50905050846003811115610fe257610fe261324e565b8351606080860151604080518681526020810188905280820192909252518b936001600160a01b0316927f301d5d753691406889e943756ef530f89238c8b689ae5571cc20bc7b3cbc09bf928290030190a450505050505050565b6008546001600160a01b031633146110675760405162461bcd60e51b8152600401610712906131e6565b6001600160a01b038216600081815260096020526040908190208390555133907f7491882e04c75a6995072c5bec24d55f0944e6aaeaaacea2bc20b8b2527459b4906110b69085815260200190565b60405180910390a35050565b6001600160a01b03821660009081526009602052604081205481906111295760405162461bcd60e51b815260206004820152601b60248201527f5061796d656e7420746f6b656e206e6f7420737570706f7274656400000000006044820152606401610712565b6001600160a01b03841615158061116a57506000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b543410155b6111a15760405162461bcd60e51b8152602060048201526008602482015267556e64657270617960c01b6044820152606401610712565b604080516010808252610220820190925260009160208201610200803683370190505090506111cf816127bc565b60106111da8561155b565b6111e491906132a4565b915060028183815181106111fa576111fa613209565b602090810291909101810191909152600a80546040805160c0810182526001600160a01b03808d1682528b81168287019081529282018481526000606084018181526080850182815260a086018b8152600189018a55989092528451600688027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8810180549287166001600160a01b031993841617815597517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a9820180549190971692169190911790945591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa84015590517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab830155517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ac8201559351805193985090949193611374937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ad909101929190910190612c8e565b50505061138187846129cf565b6001600160a01b03851615611419576001600160a01b038516600081815260096020526040908190205490516323b872dd60e01b815233600482015230602482015260448101919091526323b872dd906064016020604051808303816000875af11580156113f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141791906132c6565b505b346001600160a01b038616611460576000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b5461145d90826132e3565b90505b801561150b576000876001600160a01b03168260405160006040518083038185875af1925050503d80600081146114b3576040519150601f19603f3d011682016040523d82523d6000602084013e6114b8565b606091505b50509050806115095760405162461bcd60e51b815260206004820181905260248201527f4661696c656420746f2073656e642067617320746f20636f6e74726f6c6c65726044820152606401610712565b505b8385896001600160a01b03167f4a4ce023310123a2d4d04937f7145333d20cb660405782586d523992d7161dce8660405161154891815260200190565b60405180910390a4505094509492505050565b60408051446020808301919091524282840152606080830194909452825180830390940184526080909101909152815191012090565b61159b33836119b8565b6115b75760405162461bcd60e51b815260040161071290613199565b6115c384848484612b5a565b50505050565b6007546060906001600160a01b03166115f057505060408051602081019091526000815290565b60075460405163c87b56dd60e01b8152600481018490526001600160a01b039091169063c87b56dd90602401600060405180830381865afa158015611639573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105df91908101906132f6565b6008546001600160a01b0316331461168b5760405162461bcd60e51b8152600401610712906131e6565b6008546040516001600160a01b0390911690600090829047908381818185875af1925050503d80600081146116dc576040519150601f19603f3d011682016040523d82523d6000602084013e6116e1565b606091505b5050905080610b975760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b6044820152606401610712565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6008546001600160a01b0316331461177c5760405162461bcd60e51b8152600401610712906131e6565b6008546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633146118025760405162461bcd60e51b8152600401610712906131e6565b6008546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a0823190602401602060405180830381865afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611879919061336d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9791906132c6565b6000818152600260205260409020546001600160a01b03166119475760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610712565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061197f82610a97565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119c483610a97565b9050806001600160a01b0316846001600160a01b031614806119eb57506119eb8185611724565b80611a0f5750836001600160a01b0316611a0484610677565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a2a82610a97565b6001600160a01b031614611a505760405162461bcd60e51b815260040161071290613386565b6001600160a01b038216611ab25760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610712565b826001600160a01b0316611ac582610a97565b6001600160a01b031614611aeb5760405162461bcd60e51b815260040161071290613386565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603611bdc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610712565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60a0810151600090611c59612cd9565b604080516080810182526000808252602080830182905282840182905260608301829052925191929091611c8f918691016133cb565b60405160208183030381529060405280519060200120905060005b6004811015611d6b5760005b6004811015611d6257600082826003036004020190506000878281518110611ce057611ce0613209565b60200260200101511115611d5957868181518110611d0057611d00613209565b6020026020010151868460048110611d1a57611d1a613209565b6020020151868560048110611d3157611d31613209565b60200201805160ff6001820181169092521660048110611d5357611d53613209565b60200201525b50600101611cb6565b50600101611caa565b50611d75846127bc565b6040805160808101825260008082526020820181905291810182905260608101829052815b6004811015611ec5576000858260048110611db757611db7613209565b602002015160ff16905060005b81811015611eb7576000888460048110611de057611de0613209565b602002015160018385030360048110611dfb57611dfb613209565b60200201519050808614611e5e57809550858a85878760048110611e2157611e21613209565b60200201805180919060010160ff1660ff1681525060040260ff160181518110611e4d57611e4d613209565b602002602001018181525050611eae565b856002028a856001888860048110611e7857611e78613209565b60200201510360040260ff160181518110611e9557611e95613209565b602002602001018181525050856002028b019a50600095505b50600101611dc4565b506000935050600101611d9a565b508286604051602001611ed891906133cb565b6040516020818303038152906040528051906020012003611f3b5760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74206d6f766520696e207468697320646972656374696f6e0000006044820152606401610712565b505050505050919050565b60a0810151600090611f56612cd9565b604080516080810182526000808252602080830182905282840182905260608301829052925191929091611f8c918691016133cb565b60405160208183030381529060405280519060200120905060005b60048110156120655760005b600481101561205c57600082826004020190506000878281518110611fda57611fda613209565b6020026020010151111561205357868181518110611ffa57611ffa613209565b602002602001015186846004811061201457612014613209565b602002015186856004811061202b5761202b613209565b60200201805160ff600182018116909252166004811061204d5761204d613209565b60200201525b50600101611fb3565b50600101611fa7565b5061206f846127bc565b604080516080810182526003808252602082018190529181018290526060810191909152600090815b6004811015611ec55760008582600481106120b5576120b5613209565b602002015160ff16905060005b818110156121b65760008884600481106120de576120de613209565b6020020151600183850303600481106120f9576120f9613209565b6020020151905080861461215d57809550858a8587876004811061211f5761211f613209565b6020020180518091906001900360ff1660ff1681525060040260ff16018151811061214c5761214c613209565b6020026020010181815250506121ad565b856002028a8587876004811061217557612175613209565b602002015160010160040260ff16018151811061219457612194613209565b602002602001018181525050856002028b019a50600095505b506001016120c2565b506000935050600101612098565b60a08101516000906121d4612cd9565b60408051608081018252600080825260208083018290528284018290526060830182905292519192909161220a918691016133cb565b60405160208183030381529060405280519060200120905060005b60048110156122e65760005b60048110156122dd5760008183600402600301039050600087828151811061225b5761225b613209565b602002602001015111156122d45786818151811061227b5761227b613209565b602002602001015186846004811061229557612295613209565b60200201518685600481106122ac576122ac613209565b60200201805160ff60018201811690925216600481106122ce576122ce613209565b60200201525b50600101612231565b50600101612225565b506122f0846127bc565b6040805160808101825260008082526020820181905291810182905260608101829052815b6004811015611ec557600085826004811061233257612332613209565b602002015160ff16905060005b8181101561243257600088846004811061235b5761235b613209565b60200201516001838503036004811061237657612376613209565b602002015190508086146123d957809550858a86866004811061239b5761239b613209565b60200201805180919060010160ff1660ff1681525060ff168660040201815181106123c8576123c8613209565b602002602001018181525050612429565b856002028a60018787600481106123f2576123f2613209565b60200201510360ff1686600402018151811061241057612410613209565b602002602001018181525050856002028b019a50600095505b5060010161233f565b506000935050600101612315565b60a0810151600090612450612cd9565b604080516080810182526000808252602080830182905282840182905260608301829052925191929091612486918691016133cb565b60405160208183030381529060405280519060200120905060005b600481101561255f5760005b6004811015612556576000818360040201905060008782815181106124d4576124d4613209565b6020026020010151111561254d578681815181106124f4576124f4613209565b602002602001015186846004811061250e5761250e613209565b602002015186856004811061252557612525613209565b60200201805160ff600182018116909252166004811061254757612547613209565b60200201525b506001016124ad565b506001016124a1565b50612569846127bc565b6040805160808101825260008082526020820181905291810182905260608101829052815b6004811015611ec55760008582600481106125ab576125ab613209565b602002015160ff16905060005b818110156126ad5760008884600481106125d4576125d4613209565b6020020151600183850303600481106125ef576125ef613209565b6020020151905080861461265157809550858a86866004811061261457612614613209565b60200201805160ff60018201811690925282519116600488020360030190811061264057612640613209565b6020026020010181815250506126a4565b856002028a600187876004811061266a5761266a613209565b60200201510360ff1686600402600301038151811061268b5761268b613209565b602002602001018181525050856002028b019a50600095505b506001016125b8565b50600093505060010161258e565b6000806126c6612d06565b60005b601081101561271e578460a0015181815181106126e8576126e8613209565b6020026020010151600003612716578082848060010195506010811061271057612710613209565b60200201525b6001016126c9565b506000821161275c5760405162461bcd60e51b815260206004820152600a602482015269109bd85c9908199d5b1b60b21b6044820152606401610712565b808261276d4287606001510261155b565b8161277a5761277a61328e565b066010811061278b5761278b613209565b6020020151925060028460a0015184815181106127aa576127aa613209565b60200260200101818152505050915091565b6000816000815181106127d1576127d1613209565b6020026020010181815250506000816001815181106127f2576127f2613209565b60200260200101818152505060008160028151811061281357612813613209565b60200260200101818152505060008160038151811061283457612834613209565b60200260200101818152505060008160048151811061285557612855613209565b60200260200101818152505060008160058151811061287657612876613209565b60200260200101818152505060008160068151811061289757612897613209565b6020026020010181815250506000816007815181106128b8576128b8613209565b6020026020010181815250506000816008815181106128d9576128d9613209565b6020026020010181815250506000816009815181106128fa576128fa613209565b602002602001018181525050600081600a8151811061291b5761291b613209565b602002602001018181525050600081600b8151811061293c5761293c613209565b602002602001018181525050600081600c8151811061295d5761295d613209565b602002602001018181525050600081600d8151811061297e5761297e613209565b602002602001018181525050600081600e8151811061299f5761299f613209565b602002602001018181525050600081600f815181106129c0576129c0613209565b60200260200101818152505050565b6001600160a01b038216612a255760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610712565b6000818152600260205260409020546001600160a01b031615612a8a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610712565b6000818152600260205260409020546001600160a01b031615612aef5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610712565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b612b65848484611a17565b612b7184848484612b8d565b6115c35760405162461bcd60e51b815260040161071290613401565b60006001600160a01b0384163b15612c8357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612bd1903390899088908890600401613453565b6020604051808303816000875af1925050508015612c0c575060408051601f3d908101601f19168201909252612c0991810190613490565b60015b612c69573d808015612c3a576040519150601f19603f3d011682016040523d82523d6000602084013e612c3f565b606091505b508051600003612c615760405162461bcd60e51b815260040161071290613401565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a0f565b506001949350505050565b828054828255906000526020600020908101928215612cc9579160200282015b82811115612cc9578251825591602001919060010190612cae565b50612cd5929150612d25565b5090565b60405180608001604052806004905b612cf0612d3a565b815260200190600190039081612ce85790505090565b6040518061020001604052806010906020820280368337509192915050565b5b80821115612cd55760008155600101612d26565b60405180608001604052806004906020820280368337509192915050565b6001600160a01b038116811461194757600080fd5b600060208284031215612d7f57600080fd5b8135612d8a81612d58565b9392505050565b6001600160e01b03198116811461194757600080fd5b600060208284031215612db957600080fd5b8135612d8a81612d91565b60005b83811015612ddf578181015183820152602001612dc7565b50506000910152565b60008151808452612e00816020860160208601612dc4565b601f01601f19169290920160200192915050565b602081526000612d8a6020830184612de8565b600060208284031215612e3957600080fd5b5035919050565b60008060408385031215612e5357600080fd5b8235612e5e81612d58565b946020939093013593505050565b600080600060608486031215612e8157600080fd5b8335612e8c81612d58565b92506020840135612e9c81612d58565b929592945050506040919091013590565b6000602080835260e0830160018060a01b0380865116838601528083870151166040860152506040850151606085015260608501516080850152608085015160a085015260a085015160c080860152818151808452610100870191508483019350600092505b80831015612f335783518252928401926001929092019190840190612f13565b509695505050505050565b60008060408385031215612f5157600080fd5b8235612f5c81612d58565b91506020830135612f6c81612d58565b809150509250929050565b801515811461194757600080fd5b60008060408385031215612f9857600080fd5b8235612fa381612d58565b91506020830135612f6c81612f77565b600080600060608486031215612fc857600080fd5b8335925060208401359150604084013560048110612fe557600080fd5b809150509250925092565b6000806000806080858703121561300657600080fd5b843561301181612d58565b9350602085013561302181612d58565b9250604085013561303181612d58565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561308057613080613041565b604052919050565b600067ffffffffffffffff8211156130a2576130a2613041565b50601f01601f191660200190565b600080600080608085870312156130c657600080fd5b84356130d181612d58565b935060208501356130e181612d58565b925060408501359150606085013567ffffffffffffffff81111561310457600080fd5b8501601f8101871361311557600080fd5b803561312861312382613088565b613057565b81815288602083850101111561313d57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600181811c9082168061317357607f821691505b60208210810361319357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252600990820152682337b93134b23232b760b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016132475761324761321f565b5060010190565b634e487b7160e01b600052602160045260246000fd5b808201808211156105df576105df61321f565b80820281158282048414176105df576105df61321f565b634e487b7160e01b600052601260045260246000fd5b6000826132c157634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156132d857600080fd5b8151612d8a81612f77565b818103818111156105df576105df61321f565b60006020828403121561330857600080fd5b815167ffffffffffffffff81111561331f57600080fd5b8201601f8101841361333057600080fd5b805161333e61312382613088565b81815285602083850101111561335357600080fd5b613364826020830160208601612dc4565b95945050505050565b60006020828403121561337f57600080fd5b5051919050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b815160009082906020808601845b838110156133f5578151855293820193908201906001016133d9565b50929695505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061348690830184612de8565b9695505050505050565b6000602082840312156134a257600080fd5b8151612d8a81612d9156fea264697066735822122038d905552d4b5e7b1d882edec86d3f3f8e8c2b065afc2b6c700e6719ef30458f64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 103,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 105,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 109,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 113,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 117,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 123,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2768,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "token2048",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IToken2048)4516"
      },
      {
        "astId": 2771,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "metadataController",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMetadata2048)4502"
      },
      {
        "astId": 2773,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "admin",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2777,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "createBoardPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2800,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "boards",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Board)2796_storage)dyn_storage"
      },
      {
        "astId": 2804,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "highScores",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2808,
        "contract": "contracts/Game2048.sol:Game2048",
        "label": "__gap",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)100_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Board)2796_storage)dyn_storage": {
        "base": "t_struct(Board)2796_storage",
        "encoding": "dynamic_array",
        "label": "struct Game2048.Board[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)100_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[100]",
        "numberOfBytes": "3200"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMetadata2048)4502": {
        "encoding": "inplace",
        "label": "contract IMetadata2048",
        "numberOfBytes": "20"
      },
      "t_contract(IToken2048)4516": {
        "encoding": "inplace",
        "label": "contract IToken2048",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Board)2796_storage": {
        "encoding": "inplace",
        "label": "struct Game2048.Board",
        "members": [
          {
            "astId": 2784,
            "contract": "contracts/Game2048.sol:Game2048",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2786,
            "contract": "contracts/Game2048.sol:Game2048",
            "label": "controller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2788,
            "contract": "contracts/Game2048.sol:Game2048",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2790,
            "contract": "contracts/Game2048.sol:Game2048",
            "label": "score",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2792,
            "contract": "contracts/Game2048.sol:Game2048",
            "label": "moves",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2795,
            "contract": "contracts/Game2048.sol:Game2048",
            "label": "tiles",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}